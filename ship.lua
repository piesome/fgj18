Class = require "hump.class"
cpml = require "cpml"

ParticleEmitter = require "particleEmitter"

local shipImage = love.graphics.newImage("assets/graphics/playership.png")
local frogIcon = love.graphics.newImage("assets/graphics/drugfrog.png")
local deadFrog = love.graphics.newImage("assets/graphics/deadfrog.png")


Ship = Class
    { position = cpml.vec2.new(100, 100)
    , velocity = cpml.vec2.new(0, 0)
    , rotation = math.pi
    , rotationSpeed = 0
    , heatGeneration = 0      -- Current heat increase per second
    --, heatStored = 0        -- heat stored inside the ship
    , surfaceHeat = 100       -- heat stored on the surface
    , heatRadiationOutput = 0 -- calculated in heatUpdate
    , frogsDieAtTemperature = 1800
    , frogDeathProbability = 0.02
    , emissivity = 0.0001     -- how fast heat is radiated
    , thrusterHeat = 400      -- amount of heat generated by one thruster per second
    , shipRadius = 25         -- Used for heat calc and visuals
    , emitter = ParticleEmitter(vec2(0,0), vec2(0,0), 5, {255, 127, 0, 127}, 0.3, 1, 0.3, 120)
    , frogs = 100
    , frogEmitter = ParticleEmitter(vec2(0,0), vec2(0,0), 0.25, {255, 255, 255, 255}, 2, 1, 0.3, 1)
    , turnSpeed = 0.04
    , accelSpeed = 1.5
    }

function Ship:init(position)
    self.position = position
    self.frogEmitter.image = deadFrog
    self.frogEmitter.rotationFactor = 3
    self.frogEmitter.smaller = true
    return self
end

function Ship:draw()
    love.graphics.setColor(255, 255, 255)
    love.graphics.draw(shipImage, self.position.x, self.position.y, self.rotation, 1, 1, shipImage:getWidth() / 2, shipImage:getHeight() / 2)
end

function Ship:drawHud()
    love.graphics.setColor(255, 255, 255, 255)
    love.graphics.draw(frogIcon, 0, 0, 0, 0.5, 0.5)
    love.graphics.print(tostring(self.frogs), 32, -2)
end

function Ship:radiationAtDistance(d)
    d = math.max(1.0, d - self.shipRadius + 5)
    return self.heatRadiationOutput / (d*d)  -- exponential falloff: 1 / r^2
end

function Ship:heatUpdate(dt, particles)
    self.surfaceHeat = self.surfaceHeat + self.heatGeneration

    self.heatRadiationOutput = math.pow(self.surfaceHeat,2) * self.emissivity
    heatTransmission = self.heatRadiationOutput * dt
    self.surfaceHeat = self.surfaceHeat - heatTransmission

    if self.surfaceHeat > self.frogsDieAtTemperature and love.math.random() < self.frogDeathProbability then
        WARN("boiling frogs")
        self:loseFrog(particles)
    end

    -- print(self.surfaceHeat, self.heatRadiationOutput)
end

function Ship:update(dt, particles)
    self.heatGeneration = 0
    local velocityVector = cpml.vec2.new(0, 0)

    function move(thrust)
        velocityVector = velocityVector - cpml.vec2.new(0, thrust)
        self.heatGeneration = self.heatGeneration + self.thrusterHeat * dt

        self.emitter.position = self.position - cpml.vec2.rotate(cpml.vec2(0, -1), self.rotation) * shipImage:getWidth() / 2
        self.emitter.velocity = self.velocity + cpml.vec2.rotate(cpml.vec2.normalize(velocityVector), self.rotation):normalize() * -200
        self.emitter:update(dt, particles)
    end

    function rotate(rad)
        self.rotationSpeed = self.rotationSpeed + rad
    end

    if love.keyboard.isDown("left") then
        rotate(-self.turnSpeed * dt)
    end
    if love.keyboard.isDown("right") then
        rotate(self.turnSpeed * dt)
    end
    if love.keyboard.isDown("up") then
        move(self.accelSpeed * dt)
    end
    if love.keyboard.isDown("down") then
        move(-self.accelSpeed * dt)
    end
    if love.keyboard.isDown("9") then
        self.velocity = vec2.zero
    end

    if self.rotationSpeed > 0.1 then
        self.rotationSpeed = 0.075
    elseif self.rotationSpeed < -0.1 then
        self.rotationSpeed = -0.075
    else
        self.rotationSpeed = self.rotationSpeed / 1.01
    end
    self.rotation = self.rotation + self.rotationSpeed

    self.velocity = self.velocity + cpml.vec2.rotate(cpml.vec2.normalize(velocityVector), self.rotation)
    self.position = self.position + self.velocity * dt
    self.velocity = self.velocity - (self.velocity * dt * 0.1)

    self:heatUpdate(dt, particles)
end

function Ship:loseFrog(particles)
    if self.frogs <= 0 then
        return
    end
    self.frogs = self.frogs - 1
    self.frogEmitter.position = self.position
    self.frogEmitter.velocity = self.velocity + cpml.vec2.new(0, -love.math.random(30, 100)):rotate(love.math.random(math.pi * 2))
    self.frogEmitter.rotationFactor = love.math.random(-2, 2)
    self.frogEmitter.rotation = love.math.random(-math.pi, math.pi)
    self.frogEmitter:update(1, particles)
end

return Ship
