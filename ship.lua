Class = require "hump.class"
cpml = require "cpml"

-- Converts HSL to RGB. (input and output range: 0 - 255)
function HSL(h, s, l, a)
	if s<=0 then return l,l,l,a end
	h, s, l = h/256*6, s/255, l/255
	local c = (1-math.abs(2*l-1))*s
	local x = (1-math.abs(h%2-1))*c
	local m,r,g,b = (l-.5*c), 0,0,0
	if h < 1     then r,g,b = c,x,0
	elseif h < 2 then r,g,b = x,c,0
	elseif h < 3 then r,g,b = 0,c,x
	elseif h < 4 then r,g,b = 0,x,c
	elseif h < 5 then r,g,b = x,0,c
	else              r,g,b = c,0,x
	end return (r+m)*255,(g+m)*255,(b+m)*255,a
end

Ship = Class
    { position = cpml.vec2.new(100, 100)
    , heatGeneration = 0      -- Current heat increase per second
    --, heatStored = 0        -- heat stored inside the ship
    , surfaceHeat = 100       -- heat stored on the surface
    , heatRadiationOutput = 0 -- calculated in heatUpdate
    , emissivity = 0.0001     -- how fast heat is radiated
    , thrusterHeat = 400      -- amount of heat generated by one thruster per second
    }

function Ship:init()
    return self
end

function Ship:heatCircle(heatPercentage, radius)
    brightness = math.max(0.0, math.min(1.0, heatPercentage))*255
    love.graphics.setColor(HSL(0, 255, brightness, brightness))
    love.graphics.circle("fill", self.position.x, self.position.y, radius)
end

function Ship:draw()

    for x=1,50 do
        r = 15 + x*x/4
        self:heatCircle(self:radiationAtDistance(r)*2, r)
    end
    love.graphics.setColor(HSL(0, 255, math.min(self.surfaceHeat*0.1, 255)))
    love.graphics.print("@", self.position.x-17, self.position.y-20) -- XXX: manual centering

    love.graphics.setColor(100,100,100)
end

function Ship:radiationAtDistance(d)
    return self.heatRadiationOutput / (d*d)  -- exponential falloff: 1 / r^2
end

function Ship:heatUpdate(dt)
    self.surfaceHeat = self.surfaceHeat + self.heatGeneration

    self.heatRadiationOutput = math.pow(self.surfaceHeat,2) * self.emissivity
    heatTransmission = self.heatRadiationOutput * dt
    self.surfaceHeat = self.surfaceHeat - heatTransmission

    -- print(self.surfaceHeat, self.heatRadiationOutput)
end

function Ship:update(dt)
    self.heatGeneration = 0
    velocityVector = cpml.vec2.new(0, 0)

    function move(x, y)
        velocityVector = velocityVector - cpml.vec2.new(x, y)
        self.heatGeneration = self.heatGeneration + self.thrusterHeat * dt
    end

    if love.keyboard.isDown("left") then
        move(1,0)
    end
    if love.keyboard.isDown("right") then
        move(-1,0)
    end
    if love.keyboard.isDown("up") then
        move(0,1)
    end
    if love.keyboard.isDown("down") then
        move(0,-1)
    end
    self.position = self.position + velocityVector
    self:heatUpdate(dt)
end

return Ship
